const fs = require("fs");
const path = require("path");

const HISTORY_FILE_PATH = path.join(__dirname, "../data/history.json");

const normalizeIP = (ip) => {
  if (!ip) return "unknown";
  return ip === "::1" ? "127.0.0.1" : ip;
};

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå history.json
 * @param {string} action - ‡∏ä‡∏∑‡πà‡∏≠ action ‡πÄ‡∏ä‡πà‡∏ô "updateAlertStatus", "addNote" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
 * @param {Array} entries - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™ ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ô‡πâ‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 * @param {Object} context - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÄ‡∏ä‡πà‡∏ô { user_email, name, id, user_agent, ip_address }
 */

const appendHistory = (action, entries, context = {}) => {
  let history = [];

  try {
    if (fs.existsSync(HISTORY_FILE_PATH)) {
      const raw = fs.readFileSync(HISTORY_FILE_PATH, "utf-8");
      try {
        history = raw ? JSON.parse(raw) : [];
      } catch (parseErr) {
        console.error("‚ùå Error parsing history.json:", parseErr.message);
        history = [];
      }
    }
  } catch (err) {
    console.error("‚ùå Error reading history file:", err.message);
  }

  const {
    user_email = "unknown",
    name = "unknown",
    id = "unknown",
    user_agent = "unknown",
    ip_address = "unknown",
  } = context;

  const newEntries = entries.map((entry) => ({
    authentication: {
      user_email,
      name,
      id,
    },
    user_agent,
    ip_address: normalizeIP(ip_address),
    action,
    case: entry,
    timestamp: new Date().toISOString(), // üïí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤
  }));

  history.push(...newEntries);

  try {
    fs.writeFileSync(HISTORY_FILE_PATH, JSON.stringify(history, null, 2));
    console.log("‚úÖ History updated");
  } catch (err) {
    console.error("‚ùå Error writing history file:", err.message);
  }
};

module.exports = { appendHistory };
